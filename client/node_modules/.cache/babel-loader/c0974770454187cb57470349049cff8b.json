{"ast":null,"code":"var _jsxFileName = \"/Users/emmanuelogbewe/coding/web_apps/vimation/client/src/transactions/Form.js\";\nimport React, { Component } from 'react';\nimport { Button, InputNumber, Form, Select } from 'antd';\nconst layout = {\n  labelCol: {\n    span: 8\n  },\n  wrapperCol: {\n    span: 16\n  }\n};\nconst tailLayout = {\n  wrapperCol: {\n    offset: 8,\n    span: 16\n  }\n};\n\nclass TransactionForm extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.users = () => {\n      console.log(this.props.users);\n      return this.props.users.map(user => /*#__PURE__*/React.createElement(Select.Option, {\n        key: user.id,\n        value: user.name,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 10\n        }\n      }, user.name));\n    };\n  }\n\n  onSubmit(values) {\n    console.log(values.toString());\n    const Http = new XMLHttpRequest();\n    const url = 'https://jsonplaceholder.typicode.com/posts';\n    Http.open(\"POST\", url);\n    Http.send(values.toString());\n\n    Http.onreadystatechange = e => {\n      console.log(Http.responseText);\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Form, Object.assign({}, layout, {\n      name: \"basic\",\n      initialValues: {\n        remember: false\n      },\n      onFinish: this.onSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Form.Item, {\n      label: \"From\",\n      name: \"from\",\n      rules: [{\n        required: true,\n        message: 'Please select a user'\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Select, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }\n    }, this.users())), /*#__PURE__*/React.createElement(Form.Item, {\n      label: \"To\",\n      name: \"to\",\n      rules: [{\n        required: true,\n        message: 'Please select a user'\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Select, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }\n    }, this.users())), /*#__PURE__*/React.createElement(Form.Item, {\n      name: ['amount'],\n      label: \"Amount\",\n      rules: [{\n        type: 'number',\n        min: 10,\n        max: 10000000\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(InputNumber, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(Form.Item, Object.assign({}, tailLayout, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }\n    }, \"Send\")));\n  }\n\n}\n\nexport default TransactionForm;","map":{"version":3,"sources":["/Users/emmanuelogbewe/coding/web_apps/vimation/client/src/transactions/Form.js"],"names":["React","Component","Button","InputNumber","Form","Select","layout","labelCol","span","wrapperCol","tailLayout","offset","TransactionForm","users","console","log","props","map","user","id","name","onSubmit","values","toString","Http","XMLHttpRequest","url","open","send","onreadystatechange","e","responseText","render","remember","required","message","type","min","max"],"mappings":"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","sourcesContent":["import React,{Component} from 'react'\nimport {Button,InputNumber, Form, Select } from 'antd';\n\n\nconst layout = {\n    labelCol: {\n      span: 8,\n    },\n    wrapperCol: {\n      span: 16,\n    },\n  };\nconst tailLayout = {\n    wrapperCol: {\n      offset: 8,\n      span: 16,\n    },\n};\n\n\n\nclass TransactionForm extends Component {\n\n    \n\n  onSubmit(values) {\n    console.log(values.toString());\n    const Http = new XMLHttpRequest();\n    const url='https://jsonplaceholder.typicode.com/posts';\n    Http.open(\"POST\", url);\n    Http.send(values.toString());\n\n    Http.onreadystatechange = (e) => {\n    console.log(Http.responseText)\n    }\n   \n  }\n\n  users = () => {\n    console.log(this.props.users);\n    return this.props.users.map(user => \n         <Select.Option key={user.id} value={user.name}>{user.name}</Select.Option>)\n  }\n\n  render() {\n      return (\n        <Form\n          {...layout}\n          name=\"basic\"\n          initialValues={{\n            remember : false \n          }}\n          onFinish={this.onSubmit}\n          \n          >\n              <Form.Item\n                label=\"From\"\n                name=\"from\"\n                rules={[\n                    {\n                        required: true,\n                        message: 'Please select a user'\n                    }\n                ]}\n              >\n                <Select>\n                    {this.users()}\n                </Select>\n                  \n              </Form.Item>\n              <Form.Item\n                label=\"To\"\n                name=\"to\"\n                rules={[\n                    {\n                        required: true,\n                        message: 'Please select a user'\n                    }\n                ]}\n              >\n                <Select>\n                    {this.users()}\n                </Select>\n                  \n              </Form.Item>\n              <Form.Item\n                name={['amount']}\n                label=\"Amount\"\n                rules={[\n                {\n                    type: 'number',\n                    min: 10,\n                    max: 10000000,\n                },\n                ]}\n                >\n                <InputNumber />\n              </Form.Item>\n              <Form.Item {...tailLayout}>\n                <Button type=\"primary\" htmlType=\"submit\">\n                    Send\n                </Button>\n            </Form.Item>\n        </Form>\n      )\n  }\n}\nexport default TransactionForm \n\n"]},"metadata":{},"sourceType":"module"}